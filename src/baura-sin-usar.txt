
// ==============================
// ğŸ”§ EXTENSIÃ“N DE ESQUEMA: subcategorÃ­as de negocio
// ==============================
// AÃ±adimos un nivel intermedio para poder cargar "todos" los tipos de negocios
// sin saturar la tabla Categoria. Los negocios podrÃ¡n apuntar a una Subcategoria.

model Subcategoria {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  categoriaId Int
  categoria   Categoria  @relation(fields: [categoriaId], references: [id])
  negocios    Negocio[]
}

// AÃ±adimos la FK opcional en Negocio â†’ Subcategoria
// (colÃ³calo en tu modelo Negocio si no lo tienes ya)
// NOTE: si ya tienes migraciones, crea una nueva con prisma migrate

// --- PATCH EN Negocio ---
//  subcategoriaId Int?
//  subcategoria   Subcategoria? @relation(fields: [subcategoriaId], references: [id])

// ==============================
// ğŸ“¦ SEED: CategorÃ­as y SubcategorÃ­as masivas
// ==============================
// Archivo sugerido: prisma/seed.ts
// Ejecuta con: npx prisma db seed (configura package.json -> "prisma": { "seed": "ts-node prisma/seed.ts" })

/*
  package.json (ejemplo):
  {
    "devDependencies": { "ts-node": "^10", "typescript": "^5" },
    "prisma": { "seed": "ts-node prisma/seed.ts" }
  }
*/

// prisma/seed.ts
// -------------------------------------------------
// Este seed crea ~30 categorÃ­as y >180 subcategorÃ­as comunes en una gran ciudad.
// Ajusta libremente; evita duplicados por unique(nombre).

/*
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

const data: Array<{ nombre: string; subcategorias: string[] }> = [
  {
    nombre: 'RestauraciÃ³n y AlimentaciÃ³n',
    subcategorias: [
      'Restaurante tradicional', 'Bar de tapas', 'CervecerÃ­a', 'CafeterÃ­a', 'PanaderÃ­a', 'PastelerÃ­a', 'HeladerÃ­a',
      'HamburgueserÃ­a', 'PizzerÃ­a', 'Kebab / DÃ¶ner', 'Wok / AsiÃ¡tico rÃ¡pido', 'Gastrobar', 'Asador / Parrilla',
      'Comida para llevar', 'Comida vegana', 'Comida vegetariana', 'Restaurante italiano', 'Restaurante japonÃ©s',
      'Restaurante chino', 'Restaurante mexicano', 'Restaurante peruano', 'Restaurante colombiano', 'Restaurante brasileÃ±o',
      'Sushi bar', 'TaperÃ­a', 'Food truck', 'Vinoteca', 'Bodega con degustaciÃ³n', 'ChurrerÃ­a'
    ]
  },
  {
    nombre: 'Salud y Bienestar',
    subcategorias: [
      'ClÃ­nica dental', 'Ã“ptica', 'Farmacia', 'Parafarmacia', 'PsicologÃ­a', 'Fisioterapia', 'NutriciÃ³n',
      'PodologÃ­a', 'Logopedia', 'PsquiatrÃ­a', 'Centro mÃ©dico', 'RehabilitaciÃ³n', 'Acupuntura', 'Quiromasaje',
      'Centro de fertilidad', 'Veterinaria', 'Centro mÃ©dico estÃ©tico'
    ]
  },
  {
    nombre: 'Belleza y Cuidado personal',
    subcategorias: [
      'PeluquerÃ­a', 'BarberÃ­a', 'Centro de estÃ©tica', 'Manicura y pedicura', 'DepilaciÃ³n lÃ¡ser', 'DepilaciÃ³n cera',
      'Maquillaje profesional', 'Centro de bronceado', 'Spa urbano', 'MicropigmentaciÃ³n', 'Extensiones de pestaÃ±as'
    ]
  },
  {
    nombre: 'Moda y Complementos',
    subcategorias: [
      'Tienda de ropa hombre', 'Tienda de ropa mujer', 'Infantil / bebÃ©', 'Boutique', 'ZapaterÃ­a', 'Deportiva',
      'Vintage / segunda mano', 'Ropa de trabajo', 'Trajes de boda / fiesta', 'LencerÃ­a', 'SombrererÃ­a', 'Arreglos de ropa'
    ]
  },
  {
    nombre: 'AutomociÃ³n y Transporte',
    subcategorias: [
      'Taller mecÃ¡nico', 'Chapa y pintura', 'Taller de motos', 'Lavado de vehÃ­culos', 'Recambios', 'ITV / pre-ITV',
      'NeumÃ¡ticos', 'GrÃºas', 'Alquiler de coches', 'Alquiler de furgonetas', 'Parking privado', 'Taller elÃ©ctrico'
    ]
  },
  {
    nombre: 'Hogar y DecoraciÃ³n',
    subcategorias: [
      'Muebles', 'DecoraciÃ³n', 'IluminaciÃ³n', 'Menaje', 'Textil hogar', 'Bricolaje / DIY', 'ElectrodomÃ©sticos',
      'Cortinas y estores', 'ColchonerÃ­a', 'Tienda de cocinas', 'Reformas integrales', 'Puertas y armarios'
    ]
  },
  {
    nombre: 'TecnologÃ­a y Comunicaciones',
    subcategorias: [
      'InformÃ¡tica', 'ReparaciÃ³n de mÃ³viles', 'TelefonÃ­a', 'FotografÃ­a', 'ImpresiÃ³n 3D', 'Videovigilancia',
      'Tiendas de videojuegos', 'Servicio tÃ©cnico electrÃ³nica', 'Ciber cafÃ©'
    ]
  },
  {
    nombre: 'Cultura y Ocio',
    subcategorias: [
      'LibrerÃ­a', 'PapelerÃ­a', 'Tienda de cÃ³mics', 'Tienda de mÃºsica y vinilos', 'GalerÃ­a de arte', 'Centro cultural',
      'Sala de conciertos', 'Cine', 'Teatro', 'Escape room', 'Sala de exposiciones', 'Estudio de grabaciÃ³n'
    ]
  },
  {
    nombre: 'EducaciÃ³n y FormaciÃ³n',
    subcategorias: [
      'Academia de idiomas', 'Refuerzo escolar', 'Oposiciones', 'Autoescuela', 'Escuela de mÃºsica', 'Escuela de danza',
      'Centro de formaciÃ³n profesional', 'GuarderÃ­a / infantil', 'Clases particulares'
    ]
  },
  {
    nombre: 'Mascotas',
    subcategorias: [
      'Tienda de animales', 'Piensos y accesorios', 'PeluquerÃ­a canina', 'Adiestramiento', 'Residencia / guarderÃ­a', 'ClÃ­nica veterinaria'
    ]
  },
  {
    nombre: 'Servicios Profesionales',
    subcategorias: [
      'AsesorÃ­a fiscal', 'GestorÃ­a', 'AbogacÃ­a', 'Arquitectura', 'IngenierÃ­a', 'ConsultorÃ­a', 'NotarÃ­a', 'Recursos humanos',
      'Agencia de seguros', 'Agencia de viajes', 'TraducciÃ³n e interpretaciÃ³n'
    ]
  },
  {
    nombre: 'Deportes y Actividad FÃ­sica',
    subcategorias: [
      'Gimnasio', 'Crossfit', 'Yoga', 'Pilates', 'Artes marciales', 'Boxeo', 'Centro de escalada', 'PÃ¡del', 'Tenis',
      'Club de running', 'NataciÃ³n', 'Tienda de material deportivo'
    ]
  },
  {
    nombre: 'AlimentaciÃ³n al por menor',
    subcategorias: [
      'Supermercado', 'Ultramarinos', 'FruterÃ­a', 'CarnicerÃ­a', 'PescaderÃ­a', 'CharcuterÃ­a', 'Gourmet / delicatessen',
      'EcolÃ³gico / bio', 'Congelados', 'Bodega / vinoteca', 'Tienda de cerveza artesanal'
    ]
  },
  {
    nombre: 'Servicios TÃ©cnicos y ReparaciÃ³n',
    subcategorias: [
      'CerrajerÃ­a', 'FontanerÃ­a', 'Electricidad', 'AlbaÃ±ilerÃ­a', 'CarpinterÃ­a', 'CristalerÃ­a', 'Pintura y decoraciÃ³n',
      'TapicerÃ­a', 'ReparaciÃ³n de electrodomÃ©sticos', 'Llaves y duplicados', 'Mudanzas', 'InstalaciÃ³n de climatizaciÃ³n'
    ]
  },
  {
    nombre: 'Ocio Nocturno',
    subcategorias: [
      'Discoteca', 'Pub', 'CoctelerÃ­a', 'Bar musical', 'Karaoke', 'Sala de fiestas'
    ]
  },
  {
    nombre: 'Turismo y Alojamiento',
    subcategorias: [
      'Hotel', 'Hostal', 'Apartamento turÃ­stico', 'Casa rural', 'Albergue', 'Tour operador local', 'GuÃ­a turÃ­stico', 'Oficina de turismo'
    ]
  },
  {
    nombre: 'Transporte Urbano y MensajerÃ­a',
    subcategorias: [
      'MensajerÃ­a local', 'Reparto a domicilio', 'Taxis / VTC', 'Alquiler de bicis / patinetes', 'Parking bicicletas', 'Moto sharing'
    ]
  },
  {
    nombre: 'Finanzas y Banca',
    subcategorias: [
      'Sucursal bancaria', 'Cajero / ATM', 'Casa de cambio', 'Fintech local', 'CorredurÃ­a de seguros'
    ]
  },
  {
    nombre: 'Eventos y Celebraciones',
    subcategorias: [
      'OrganizaciÃ³n de eventos', 'Catering', 'Alquiler de sonido e iluminaciÃ³n', 'FotomatÃ³n', 'Flores para eventos',
      'Trajes de ceremonia', 'Wedding planner', 'SalÃ³n de celebraciones'
    ]
  },
  {
    nombre: 'Foto y Audiovisual',
    subcategorias: [
      'Estudio fotogrÃ¡fico', 'VideÃ³grafo', 'Alquiler de material', 'Revelado e impresiÃ³n', 'Drones / aerial'
    ]
  },
  {
    nombre: 'Arte y ArtesanÃ­a',
    subcategorias: [
      'Taller de cerÃ¡mica', 'Taller de joyerÃ­a', 'MarqueterÃ­a', 'LutherÃ­a', 'ArtesanÃ­a textil', 'SerigrafÃ­a / estampaciÃ³n'
    ]
  },
  {
    nombre: 'Infantil y Familia',
    subcategorias: [
      'Parque infantil', 'Ludoteca', 'Tienda de juguetes', 'Ropa infantil', 'AnimaciÃ³n infantil', 'FotografÃ­a infantil'
    ]
  },
  {
    nombre: 'Mayores y Cuidados',
    subcategorias: [
      'Centro de dÃ­a', 'Ayuda a domicilio', 'Ortopedia', 'RehabilitaciÃ³n geriÃ¡trica', 'Teleasistencia'
    ]
  },
  {
    nombre: 'Mercados y Agricultura',
    subcategorias: [
      'Mercado municipal', 'Plaza de abastos', 'Venta de proximidad', 'Huertos urbanos', 'Cooperativa agrÃ­cola'
    ]
  },
  {
    nombre: 'EnergÃ­a y Sostenibilidad',
    subcategorias: [
      'InstalaciÃ³n fotovoltaica', 'Comunidad energÃ©tica', 'AuditorÃ­a energÃ©tica', 'Movilidad elÃ©ctrica', 'Reciclaje y residuos'
    ]
  },
  {
    nombre: 'Coworking y Negocios',
    subcategorias: [
      'Coworking', 'Oficinas compartidas', 'Aceleradora', 'Incubadora', 'Salas de reuniones'
    ]
  },
  {
    nombre: 'Servicios DomÃ©sticos',
    subcategorias: [
      'Limpieza', 'Plancha a domicilio', 'Cuidado de niÃ±os', 'Cuidado de mascotas', 'Manitas / handyman'
    ]
  },
  {
    nombre: 'Juegos y Aficiones',
    subcategorias: [
      'Tienda de juegos de mesa', 'Tienda de hobbies', 'Modelismo', 'Comics y manga', 'Cartas coleccionables', 'Sala gaming / eSports'
    ]
  },
  {
    nombre: 'Especializados / Otros',
    subcategorias: [
      'AntigÃ¼edades', 'NumismÃ¡tica y filatelia', 'Sex shop', 'Tienda de disfraces', 'RotulaciÃ³n e impresiÃ³n', 'MercerÃ­a'
    ]
  },
]


async function main() {
  for (const cat of data) {
    const categoria = await prisma.categoria.upsert({
      where: { nombre: cat.nombre },
      update: {},
      create: { nombre: cat.nombre },
    })
    for (const s of cat.subcategorias) {
      await prisma.subcategoria.upsert({
        where: { nombre: s },
        update: { categoriaId: categoria.id },
        create: { nombre: s, categoriaId: categoria.id },
      })
    }
  }
}

main()
  .then(() => prisma.$disconnect())
  .catch(async (e) => { console.error(e); await prisma.$disconnect(); process.exit(1) })
*/


// ==============================
// ğŸŒ¸ EconomÃ­a de PÃ©talos (versiÃ³n simple, sin rifas ni superlikes)
// ==============================
// Reglas:
//  - Publicar una reseÃ±a â†’ +5 pÃ©talos al autor
//  - Recibir una reseÃ±a en tu negocio â†’ +5 pÃ©talos al dueÃ±o del negocio
//  - Dar like a una reseÃ±a â†’ âˆ’1 pÃ©talo (se quema). Si saldo < 1, no puedes dar like.
//  - Objetivo: ciclo simple de ganar (crear) y gastar (reaccionar).

// ---- PATCH PRISMA ----
// AÃ±ade saldo + ledger de transacciones
model PetaloTx {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  delta     Int      // + gana, - gasta
  motivo    String   // 'resena_autor','resena_negocio','like'
  refTipo   String?  // 'Resena','Post'
  refId     Int?
  creadoEn  DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId, creadoEn])
  @@index([refTipo, refId])
}

// PATCH en Usuario: aÃ±ade campos si no existen
// petalosSaldo Int      @default(0)
// petalosTx    PetaloTx[]

// ------------------------------
// ğŸ§  Servicios (NestJS/Prisma) â€“ implementaciÃ³n mÃ­nima
// ------------------------------
/*
// petals.service.ts
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

export class PetalsService {
  async awardOnReview(resenaId: number) {
    return prisma.$transaction(async (tx) => {
      const resena = await tx.resena.findUnique({
        where: { id: resenaId },
        include: { negocio: { select: { dueÃ±oId: true } }, usuario: { select: { id: true } } },
      })
      if (!resena) throw new Error('ReseÃ±a no encontrada')

      // +5 al autor
      await tx.petaloTx.create({ data: { usuarioId: resena.usuarioId, delta: 5, motivo: 'resena_autor', refTipo: 'Resena', refId: resena.id } })
      await tx.usuario.update({ where: { id: resena.usuarioId }, data: { petalosSaldo: { increment: 5 } } })

      // +5 al dueÃ±o del negocio (si existe y no es la misma persona)
      const duenoId = resena.negocio?.dueÃ±oId
      if (duenoId && duenoId !== resena.usuarioId) {
        await tx.petaloTx.create({ data: { usuarioId: duenoId, delta: 5, motivo: 'resena_negocio', refTipo: 'Resena', refId: resena.id } })
        await tx.usuario.update({ where: { id: duenoId }, data: { petalosSaldo: { increment: 5 } } })
      }

      return { ok: true }
    })
  }

  async likeResena(usuarioId: number, postId: number) {
    return prisma.$transaction(async (tx) => {
      const u = await tx.usuario.findUnique({ where: { id: usuarioId }, select: { petalosSaldo: true } })
      if (!u || u.petalosSaldo < 1) throw new Error('Saldo insuficiente de pÃ©talos')

      // registrar like normal en tu modelo Like
      await tx.like.create({ data: { usuarioId, postId, tipo: 'like' } })

      // cobrar 1 pÃ©talo (burn)
      await tx.petaloTx.create({ data: { usuarioId, delta: -1, motivo: 'like', refTipo: 'Post', refId: postId } })
      await tx.usuario.update({ where: { id: usuarioId }, data: { petalosSaldo: { decrement: 1 } } })

      return { ok: true }
    })
  }
}
*/

// ------------------------------
// âœ… Anti-abuso mÃ­nimos (opcional)
// ------------------------------
// - Evitar que el dueÃ±o se auto-premie reseÃ±ando su propio negocio: ya lo impedimos si dueÃ±oId === autorId.
// - (Opcional) MÃ¡x. 2 reseÃ±as recompensadas por autor/dÃ­a.
// - (Opcional) ReseÃ±as de calidad: longitud mÃ­nima o compra/reserva asociada.


# API v1 â€“ Endpoints propuestos (cobertura total)
_Base path_: `/api/v1`  Â· Auth via Bearer JWT  Â· PaginaciÃ³n: `?page=1&limit=20`  Â· Filtros comunes: `?q=texto&sort=-creadoEn`

## 0) Salud
- `GET /health` â†’ estado del servicio

## 1) Auth
- `POST /auth/register` â†’ {nombre, nickname, email, password}
- `POST /auth/login` â†’ {email, password}
- `POST /auth/refresh` â†’ refresh token
- `POST /auth/logout`
- `POST /auth/forgot-password` â†’ {email}
- `POST /auth/reset-password` â†’ {token, newPassword}
- `POST /auth/verify-email` â†’ {token}

## 2) Usuario
- `GET  /me` â†’ perfil propio + saldos (pÃ©talos)
- `PATCH /me` â†’ actualizar {nombre, bio, foto}
- `GET  /me/petalos/balance`
- `GET  /me/petalos/tx` â†’ ledger (paginado)
- `GET  /usuarios/:id` â†’ perfil pÃºblico
- `GET  /usuarios` â†’ listado/bÃºsqueda
- `PATCH /usuarios/:id` (admin)
- `DELETE /usuarios/:id` (admin)

## 3) CategorÃ­as & SubcategorÃ­as
- `GET  /categorias`
- `POST /categorias` (admin)
- `PATCH /categorias/:id` (admin)
- `DELETE /categorias/:id` (admin)
- `GET  /subcategorias?categoriaId=`
- `POST /subcategorias` (admin)
- `PATCH /subcategorias/:id` (admin)
- `DELETE /subcategorias/:id` (admin)

## 4) Negocios
- `GET  /negocios` â†’ filtros: `?categoriaId&subcategoriaId&q`
- `POST /negocios` (dueÃ±o) â†’ crear negocio (dueÃ±oId = me)
- `GET  /negocios/:id`
- `PATCH /negocios/:id` (dueÃ±o/admin)
- `DELETE /negocios/:id` (dueÃ±o/admin)
- `PATCH /negocios/:id/config-horario` â†’ {horario, intervaloReserva}
- `GET  /negocios/:id/horario`
- `GET  /negocios/:id/posts`
- `GET  /negocios/:id/resenas`
- `GET  /negocios/:id/reservas?desde=&hasta=`
- `GET  /negocios/:id/availability?date=YYYY-MM-DD` â†’ genera slots por `intervaloReserva`

## 5) Productos
- `GET  /negocios/:id/productos`
- `POST /negocios/:id/productos` (dueÃ±o)
- `GET  /productos/:id`
- `PATCH /productos/:id` (dueÃ±o)
- `DELETE /productos/:id` (dueÃ±o)

## 6) Promociones
- `GET  /negocios/:id/promociones`
- `POST /negocios/:id/promociones` (dueÃ±o)
- `GET  /promociones/:id`
- `PATCH /promociones/:id` (dueÃ±o)
- `DELETE /promociones/:id` (dueÃ±o)

## 7) Posts (unificado)
- `GET  /posts?tipo=&usuarioId=&negocioId=`
- `GET  /posts/:id`
- `DELETE /posts/:id` (autor/admin)

## 8) ReseÃ±as (como tipo de Post + tabla Resena)
- `POST /negocios/:id/resenas` â†’ {contenido, puntuacion, selloNenufar}
  - **Side-effect**: crea `Post` tipo reseÃ±a y **paga pÃ©talos** (+5 autor, +5 dueÃ±o)
- `GET  /resenas/:id`
- `PATCH /resenas/:id` (autor)
- `DELETE /resenas/:id` (autor/admin)

## 9) Comentarios
- `GET  /posts/:id/comentarios`
- `POST /posts/:id/comentarios` â†’ {contenido}
- `PATCH /comentarios/:id` (autor)
- `DELETE /comentarios/:id` (autor/admin)

## 10) Likes
- `POST   /posts/:id/like` â†’ consume **1 pÃ©talo** (si saldoâ‰¥1), crea `Like(tipo='like')`
- `DELETE /posts/:id/like` â†’ quita like (no reembolsa pÃ©talos)
- `GET    /posts/:id/likes` â†’ conteo y listado

## 11) Reservas (horario genÃ©rico)
- `GET  /negocios/:id/availability?date=YYYY-MM-DD` â†’ slots generados
- `POST /negocios/:id/reservas` â†’ {fecha, nota}
- `GET  /reservas/:id`
- `DELETE /reservas/:id` (usuario/dueÃ±o)
- `GET  /me/reservas`

## 12) Mesas (mÃ³dulo opcional)
- `GET  /negocios/:id/mesas`
- `POST /negocios/:id/mesas` (dueÃ±o) â†’ {nombre, capacidad, ubicacion}
- `PATCH /mesas/:id` (dueÃ±o)
- `DELETE /mesas/:id` (dueÃ±o)
- `GET  /negocios/:id/mesas/availability?date=YYYY-MM-DD&desde=HH:mm&hasta=HH:mm`
- `POST /mesas/:id/reservas` â†’ {usuarioId?, fecha, horaInicio, horaFin, nota}
- `GET  /reservas-mesa/:id`
- `DELETE /reservas-mesa/:id` (usuario/dueÃ±o)

## 13) Pedidos / Compras / Pagos
- **Carrito/Pedido**
  - `POST /negocios/:id/pedidos` â†’ crea pedido vacÃ­o
  - `GET  /pedidos/:id`
  - `POST /pedidos/:id/items` â†’ {productoId, cantidad}
  - `PATCH /pedidos/:id/items/:itemId` â†’ {cantidad}
  - `DELETE /pedidos/:id/items/:itemId`
  - `PATCH /pedidos/:id` â†’ {estado}
- **Compra** (por usuario que participa)
  - `POST /pedidos/:id/compras` â†’ {usuarioId, total}
  - `GET  /compras/:id`
  - `GET  /me/compras`
- **Pago**
  - `POST /compras/:id/pagos` â†’ {metodoPago, cantidad}
  - `GET  /pagos/:id`
  - `GET  /me/pagos`

## 14) Logros
- `GET  /logros` â†’ filtros: `?tipo=&objetivoTipo=&objetivoId=`
- `POST /logros` (admin)
- `PATCH /logros/:id` (admin)
- `DELETE /logros/:id` (admin)
- `GET  /me/logros` â†’ progreso
- `POST /logros/:id/grant` (admin) â†’ concede manualmente a un usuario {usuarioId}

## 15) PÃ©talos (economÃ­a simple)
- `GET  /me/petalos/balance`
- `GET  /me/petalos/tx` â†’ historial
- (AutomÃ¡tico) **on reseÃ±a creada** â†’ `+5 autor`, `+5 dueÃ±o negocio`
- (AutomÃ¡tico) **on like** â†’ `âˆ’1` del que da like (si saldo<1 â†’ 409)
- `POST /admin/petalos/ajustar` (admin) â†’ {usuarioId, delta, motivo}
- `GET  /economia/config` (admin)
- `PATCH /economia/config` (admin) â†’ ajustar reglas si hiciera falta

## 16) BÃºsqueda y Feed
- `GET /search` â†’ busca en negocios/productos/posts (`?q=&tipo=`)
- `GET /feed` â†’ timeline de posts (novedades, reseÃ±as, promos)

## 17) Admin (seguridad/gestiÃ³n)
- `GET  /admin/metrics` â†’ conteos, M2 de pÃ©talos, DAU, etc.
- `PATCH /admin/usuarios/:id/ban`
- `GET  /admin/auditoria/petalos` â†’ agregados de `PetaloTx`

---
### Notas de implementaciÃ³n
- **Eventos automÃ¡ticos**: pagar pÃ©talos al crear reseÃ±a y cobrar al dar like se hacen en **transacciones** de los endpoints correspondientes.
- **Errores**: usar 400 (validaciÃ³n), 401/403 (auth), 404 (no existe), 409 (conflicto: saldo < 1 para like), 422 (regla negocio), 500 (server).
- **Idempotencia**: pagos con `Idempotency-Key` en cabecera.
- **Rate limiting**: `/auth/*` y `/posts/:id/like`.
- **PaginaciÃ³n**: `X-Total-Count` en cabecera.
